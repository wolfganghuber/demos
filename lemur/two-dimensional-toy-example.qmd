---
title: "Two dimensional toy example"
author: "CAE and WH"
format: 
  html:
    code-fold: false
    code-tools: true
    embed-resources: true
    highlight-style: github
    toc: false 
    code-line-numbers: false 
lightbox: true
---


```{r}
#| label: loadpkg
#| message: false
library("SingleCellExperiment")
library("tidyverse")
source("cae_util_functions.R")
if (!dir.exists("out")) dir.create("out")
```


```{r}
#| label: simdata
set.seed(2)
n_cells = 100
celltype_assign = sample(letters[1:2], size = n_cells, replace = TRUE)
cond_assign = sample(c("control", "treated"), size = n_cells, replace = TRUE)
mm = model.matrix(~ celltype_assign * cond_assign - 1)

celltype_centers = cbind(c(-2, 3), c(5, 1))
treat_eff = cbind(c(0, 0.2), c(0.3, 3.5))

Y_mean = cbind(celltype_centers, treat_eff) %*% t(mm)
Y = (Y_mean + rnorm(n_cells * 2, sd = 0.2)) / 2

plot(t(Y), col = as.factor(cond_assign))
```

```{r}
#| label: fit
fit = lemur::lemur(Y, design = ~ cond_assign - 1, n_embedding = 1, test_fraction = 0)
fit = lemur::align_harmony(fit, design = ~ cond_assign - 1, nclust = 2)
```


```{r}
#| label: theme
font_size = 8
font_size_small = 6
font_size_tiny = 5
font_size_large = 10
publ_theme = cowplot::theme_cowplot(font_size = font_size, rel_small = font_size_small / font_size,
                                     rel_tiny = font_size_tiny / font_size, rel_large = font_size_large / font_size,
                                     line_size = 0.3) +
  theme(plot.title = element_text(size = font_size),
        axis.title = element_text(size = font_size_small),
        legend.title = element_text(size = font_size_small),
        strip.background = element_blank(),
        strip.text = element_text(size = font_size_small))
theme_set(publ_theme)
```


```{r}
ctrl_space = lemur:::grassmann_map(fit$coefficients[,,1], fit$base_point)
trt_space = lemur:::grassmann_map(fit$coefficients[,,2], fit$base_point)
Y_pred_ctrl = predict(fit, newcondition = cond(cond_assign = "control"))
Y_pred_trt = predict(fit, newcondition = cond(cond_assign = "treated"))
annotate_subspace = function(origin = c(0,0), dir = c(1,0), ...){
  geom_abline(intercept = origin[2] + dir[2] * (-origin[1] / dir[1]), slope = dir[2]/dir[1], ...)
}

annotate_point = function(point = c(0,0), ...){
  annotate("point", x = point[1], y = point[2], ...) 
}

annotate_ticks = function(origin = c(0,0), dir = c(1,0), at = seq(-10, 10), length = 0.1, ...){
  orth_dir = c(dir[2], -dir[1])
  pos = t(lemur:::mply_dbl(at, \(t) origin + t * dir, ncol=2))
  start = pos + length/2 * orth_dir
  end = pos - length/2 * orth_dir
  dat = tibble(pos = t(pos), start = t(start), end = t(end))
  geom_segment(data = dat, aes(x = start[,1], xend = end[,1], y = start[,2], yend = end[,2]), ...)
}

annotate_labels_along = function(origin = c(0,0), dir = c(1,0), labels = at, at = 0, offset = 0, extra_df = NULL, ...){
  orth_dir = c(dir[2], -dir[1])
  pos = t(lemur:::mply_dbl(at, \(t) origin + t * dir, ncol=2))
  dat = bind_cols(tibble(pos = t(pos), labels), extra_df)
  angle = atan2(dir[2], dir[1]) / pi * 180
  geom_text(data=dat, aes(label = labels, x = pos[,1] + offset * orth_dir[1], y = pos[,2] + offset * orth_dir[2]), angle = angle, ...)
}

find_intersection = function(a, v, b, w){
  k =  (b[1] - a[1]) / v[1]
  g = w[1] / v[1]
  y = (b[2] - a[2] - k * v[2]) / (g * v[2] - w[2])
  b + y * w
}
offset_ctrl =  fit$alignment_coefficients[,1,1]
offset_trt =  fit$alignment_coefficients[,1,2]
scale_ctrl = (1 + fit$alignment_coefficients[,2,1])
scale_trt = (1 + fit$alignment_coefficients[,2,2]) 

arc_dat = bind_rows(
  tibble(pos = t(find_intersection(rowMeans(Y), fit$base_point, fit$linear_coefficients[,2], trt_space)), 
         r = 3, start = atan2(fit$base_point[1], fit$base_point[2]), end = atan2(trt_space[1], trt_space[2])),
  tibble(pos = t(find_intersection(rowMeans(Y), fit$base_point, fit$linear_coefficients[,1], ctrl_space)), 
         r = 2.5, start = atan2(fit$base_point[1], fit$base_point[2]), end = atan2(ctrl_space[1], ctrl_space[2])))

# Lets make some data
sim_data = tibble(celltype = celltype_assign, condition = cond_assign, 
       Y = t(Y), Y_ctrl = t(Y_pred_ctrl), Y_trt = t(Y_pred_trt)) 

pl0 = sim_data %>%
  ggplot() +
    geom_point(aes(x = Y[,1], y = Y[,2], color = condition), size = 0.3) +
    scale_color_manual(values = c("control" = "#FC8D62", "treated" = "#8DA0CB")) +
    scale_x_continuous(breaks = c(-3:3)) +
    labs(x = "Gene 1", y = "Gene 2", color = "") +
    coord_fixed(xlim = c(-2.8, 3.6), ylim = c(0, 2.8), clip = "off") +
    theme(legend.position = c(0.02, 0.05), legend.direction = "horizontal") 
pl0

pl1 = sim_data %>%
  ggplot() +
    annotate_subspace(origin = rowMeans(Y), dir = fit$base_point, color = "#898989", lwd = 0.5, alpha = 0.3) +
    annotate_subspace(origin = fit$linear_coefficients[,1], dir = ctrl_space, color = "black", lwd = 0.6) +
    annotate_subspace(origin = fit$linear_coefficients[,2], dir = trt_space, color = "black", lwd = 0.6) +
    annotate("text", x = 0.3, y = 0.4, label = "$x \\matr{\\Gamma}$", hjust = 0.5, size = font_size_small/.pt) +
    annotate("segment", x = 0.3, y = 0.5, xend = fit$linear_coefficients[1,1], yend = fit$linear_coefficients[2,1], color = "lightgrey") +
    annotate_point(fit$linear_coefficients[,1], size = 0.8) +
    annotate_point(fit$linear_coefficients[,2], size = 0.8) +
    # The following is a helpful check that my ticks are correct
    # geom_point(data = tibble(Y = t(lemur:::predict.lemur_fit(fit, newcondition = cond(cond_assign = "control"), embedding = matrix(c(0:5), nrow = 1)))),
    #            aes(x = Y[,1], y = Y[,2]), color = "red", size = 0.3) +
    # geom_point(data = tibble(Y = t(lemur:::predict.lemur_fit(fit, newcondition = cond(cond_assign = "treated"), embedding = matrix(c(0:5), nrow = 1)))),
    #            aes(x = Y[,1], y = Y[,2]), color = "red", size = 0.3) +
    geom_point(aes(x = Y[,1], y = Y[,2], color = condition), size = 0.3) +
    scale_color_manual(values = c("control" = "#FC8D62", "treated" = "#8DA0CB")) +
    scale_x_continuous(breaks = c(-3:3)) +
    labs(x = "Gene 1", y = "Gene 2", color = "") +
    coord_fixed(xlim = c(-2.8, 3.6), ylim = c(0, 2.8), clip = "off") +
    theme(legend.position = c(0.02, 0.05), legend.direction = "horizontal") 
pl1

pl2 = sim_data %>%
  ggplot() +
    # annotate_subspace(origin = rowMeans(Y), dir = fit$base_point, color = "#898989", lwd = 0.5, alpha = 0.3) +
    # annotate_labels_along(origin = rowMeans(Y), dir = fit$base_point, labels = "$o$: base space", at = 3,
    #                       offset = 0.15, size = font_size_small/.pt, color = "#898989") +
    annotate_subspace(origin = fit$linear_coefficients[,1], dir = ctrl_space, color = "black", lwd = 0.6) +
    annotate_labels_along(origin = fit$linear_coefficients[,1], dir = ctrl_space, labels = "$\\matr{R}(\\textrm{control})$", at = 2.5,
                          hjust = 0, offset = -0.15, size = font_size_small/.pt, color = "#898989") +
    annotate_subspace(origin = fit$linear_coefficients[,2], dir = trt_space, color = "black", lwd = 0.6) +
    annotate_labels_along(origin = fit$linear_coefficients[,2], dir = trt_space, labels = "$\\matr{R}(\\textrm{treated})$", at = 2,
                          hjust = 0, offset = 0.15, size = font_size_small/.pt, color = "#898989") +
    annotate_ticks(fit$linear_coefficients[,1] - ctrl_space * offset_ctrl / scale_ctrl, dir = ctrl_space / scale_ctrl, at = -4:3) +
    annotate_ticks(fit$linear_coefficients[,2] - trt_space * offset_trt / scale_trt, dir = trt_space / scale_trt, at = -3:3) +
    annotate_labels_along(fit$linear_coefficients[,1] - ctrl_space * offset_ctrl / scale_ctrl, dir = ctrl_space / scale_ctrl, at = -2:2, offset = 0.3, size = font_size_tiny / .pt) +
    annotate_labels_along(fit$linear_coefficients[,1] - ctrl_space * offset_ctrl / scale_ctrl, dir = ctrl_space / scale_ctrl, at = -4:-3, offset = -0.3, size = font_size_tiny / .pt) +
    annotate_labels_along(fit$linear_coefficients[,2] - trt_space * offset_trt / scale_trt, dir = trt_space / scale_trt, at = -1:3, offset = -0.3, size = font_size_tiny / .pt) +
    annotate_labels_along(fit$linear_coefficients[,2] - trt_space * offset_trt / scale_trt, dir = trt_space / scale_trt, at = -3:-2, offset = 0.3, size = font_size_tiny / .pt) +
    annotate("text", x = 0.3, y = 0.4, label = "$x \\matr{\\Gamma}$", hjust = 0.5, size = font_size_small/.pt) +
    annotate("segment", x = 0.3, y = 0.5, xend = fit$linear_coefficients[1,1], yend = fit$linear_coefficients[2,1], color = "lightgrey") +
    annotate_point(fit$linear_coefficients[,1], size = 0.8) +
    annotate_point(fit$linear_coefficients[,2], size = 0.8) +
    # The following is a helpful check that my ticks are correct
    # geom_point(data = tibble(Y = t(lemur:::predict.lemur_fit(fit, newcondition = cond(cond_assign = "control"), embedding = matrix(c(0:5), nrow = 1)))),
    #            aes(x = Y[,1], y = Y[,2]), color = "red", size = 0.3) +
    # geom_point(data = tibble(Y = t(lemur:::predict.lemur_fit(fit, newcondition = cond(cond_assign = "treated"), embedding = matrix(c(0:5), nrow = 1)))),
    #            aes(x = Y[,1], y = Y[,2]), color = "red", size = 0.3) +
    geom_point(aes(x = Y[,1], y = Y[,2], color = condition), size = 0.3) +
    scale_color_manual(values = c("control" = "#FC8D62", "treated" = "#8DA0CB")) +
    scale_x_continuous(breaks = c(-3:3)) +
    labs(x = "Gene 1", y = "Gene 2", color = "") +
    coord_fixed(xlim = c(-2.8, 3.6), ylim = c(0, 2.8), clip = "off") +
    theme(legend.position = c(0.02, 0.05), legend.direction = "horizontal") 

pl2
```


```{r, paged.print=FALSE}
pl_proj = colData(fit) |>
  as_tibble() |>
  mutate(z = c(fit$embedding),
         y = runif(n()) * 0.4 - 0.2) |>
  ggplot(aes(x = z, y = y)) +
    geom_point(aes(color = cond_assign), size = 0.5, show.legend = FALSE) +
    scale_color_manual(values = c("control" = "#FC8D62", "treated" = "#8DA0CB")) +
    annotate(geom = "text", x = 0, y = -0.5, label = "Embedding Position ($\\matr{Z}$)", hjust = 0.5, size = font_size_small / .pt) +
    annotate_subspace() +
    annotate_ticks(length = 0.1) +
    annotate_labels_along(at = -5:5, labels = -5:5, offset = -0.4, size = font_size_tiny / .pt, extra_df = tibble(Gene = "Gene 1")) +
    lims(x = c(-2.7, 2.8), y = c(-1, 1)) +
    theme(axis.ticks = element_blank(), axis.text = element_blank(), axis.line = element_blank(),
          axis.title.y = element_blank())
pl_proj
```

```{r}
plot_assemble(
  add_text("(A)", x = 0.5, y = 0.5, vjust = 1, fontsize = font_size, fontface = "bold"),
  add_plot(pl2, x = 2, y = 0, width = 75, height = 40),
  add_text("(B)", x = 1.5, y = 38, vjust = 1, fontsize = font_size, fontface = "bold"),
  add_plot(pl_proj, x = 10, y = 40, width = 58, height = 28),
  width = 80, height = 68, units = "mm", show_grid_lines = FALSE,
  latex_support = TRUE, filename = "out/simulated_data.pdf"
)

```


```{r}
plot_assemble(
  add_plot(pl0, x = 2, y = 0, width = 75, height = 40),
  width = 80, height = 42, units = "mm", show_grid_lines = FALSE,
  latex_support = TRUE, filename = "out/simulated_data_only_points.pdf"
)
pdftools::pdf_convert("out/simulated_data_only_points.pdf", dpi = 600,
                      filenames = "out/simulated_data_only_points.png")
```



```{r}
plot_assemble(
  add_plot(pl1, x = 2, y = 0, width = 75, height = 40),
  width = 80, height = 42, units = "mm", show_grid_lines = FALSE,
  latex_support = TRUE, filename = "out/simulated_data_with_subspace.pdf"
)
pdftools::pdf_convert("out/simulated_data_with_subspace.pdf", dpi = 600,
                      filenames = "out/simulated_data_with_subspace.png")
```




```{r}
plot_assemble(
  add_plot(pl2, x = 2, y = 0, width = 75, height = 40),
  width = 80, height = 42, units = "mm", show_grid_lines = FALSE,
  latex_support = TRUE, filename = "out/simulated_data_with_coordinate_system.pdf"
)
pdftools::pdf_convert("out/simulated_data_with_coordinate_system.pdf", dpi = 600,
                      filenames = "out/simulated_data_with_coordinate_system.png")
```



```{r}
plot_assemble(
  add_plot(pl_proj, x = 2, y = 0, width = 60, height = 30),
  width = 65, height = 35, units = "mm", show_grid_lines = FALSE,
  latex_support = TRUE, filename = "out/simulated_data_projected.pdf"
)
pdftools::pdf_convert("out/simulated_data_projected.pdf", dpi = 600,
                      filenames = "out/simulated_data_projected.png")
```
